<!doctype html>
<html lang="vi">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Port Map • Viewer (Berth labels + Panels)</title>
<style>
  html,body{margin:0;height:100%}
  #stage{position:relative;width:100vw;height:100dvh;overflow:hidden;background:#49aeb6}
  svg{width:100%;height:100%;display:block;touch-action:none;user-select:none}

  .hud{position:absolute;z-index:30;left:12px;top:12px;display:flex;gap:8px;flex-wrap:wrap}
  .btn{padding:8px 12px;border-radius:10px;background:#ffffffcc;border:1px solid #d0d0d0;font:600 13px/1 system-ui}
  .btn:active{transform:translateY(1px)}
  .warn{position:absolute;z-index:40;right:12px;top:12px;background:#fff3cd;border:1px solid #ffe69c;color:#7f5f00;padding:8px 10px;border-radius:10px;font:600 13px/1.2 system-ui}

  /* Jobs bảng giữa màn hình */
  .jobs{position:absolute;z-index:35;left:50%;top:14px;transform:translateX(-50%);
        background:#ffffff;border:1px solid #e4e7eb;box-shadow:0 10px 30px #0003;
        border-radius:14px;width:min(1100px,94vw);overflow:hidden}
  .jobs-header{display:flex;align-items:center;gap:10px;padding:10px 12px;background:#f8fafc;border-bottom:1px solid #eef1f4}
  .jobs-title{font:700 15px/1.2 system-ui;color:#1b2734}
  .jobs-toggle{margin-left:auto;border:0;background:#edf2f7;border-radius:10px;padding:6px 10px;font:700 13px;cursor:pointer}
  .jobs-body{max-height:40vh;overflow:auto}
  table{width:100%;border-collapse:collapse;font:500 13px/1.45 system-ui}
  th,td{padding:8px 10px;border-bottom:1px solid #eef2f6;white-space:nowrap}
  th{position:sticky;top:0;background:#f8fafc;font-weight:700;color:#44566c;z-index:1}
  td.ship{font-weight:700;color:#163a6b}
  .bar{height:8px;background:#e9ecef;border-radius:5px;overflow:hidden}
  .bar>i{display:block;height:100%;background:#34c759}
  tr:hover{background:#f6fbff;cursor:pointer}
  @media (max-width:640px){.jobs-body{max-height:50vh}.hide-sm{display:none}}

  /* Panel chung */
  .panel{position:absolute;z-index:40;left:50%;top:18px;transform:translateX(-50%);
         background:#fff;border:1px solid #e3e6ea;box-shadow:0 10px 30px #0002;border-radius:12px;
         min-width:320px;max-width:92vw;padding:14px 16px;display:none}
  .panel h3{margin:0 0 8px;font:700 18px/1.2 system-ui}
  .rows{display:grid;grid-template-columns:120px 1fr;gap:6px 12px;font:500 13px/1.5 system-ui}
  .rows div:nth-child(odd){color:#607085}
  .rows div:nth-child(even){color:#1b2734}
  .close{position:absolute;right:10px;top:10px;border:0;background:#f3f4f6;border-radius:8px;padding:6px 10px;cursor:pointer}

  #layer-ships{pointer-events:visiblePainted}
  .ship{pointer-events:visiblePainted}
  .ship image,.ship text{pointer-events:none}
  .ship .hit{pointer-events:all;cursor:pointer}
</style>
</head>
<body>
<div id="stage">
  <div class="hud">
    <button class="btn" id="fit">Fit</button>
    <button class="btn" id="cover">Cover</button>
    <button class="btn" id="zoomIn">＋</button>
    <button class="btn" id="zoomOut">－</button>
    <a class="btn" href="data-entry.html">← Data Entry</a>
  </div>
  <div class="warn" id="warn" style="display:none">Chưa có dữ liệu. Hãy nhập ở “Data Entry”.</div>

  <!-- Jobs -->
  <div class="jobs" id="jobsCard">
    <div class="jobs-header">
      <div class="jobs-title">Tiến độ làm hàng (theo tàu)</div>
      <button class="jobs-toggle" id="jobsToggle">Ẩn ▲</button>
    </div>
    <div class="jobs-body" id="jobsBody">
      <table id="jobsTable">
        <thead><tr><th>Bến</th><th>Tàu</th><th class="hide-sm">ShipKey</th><th class="hide-sm">ETA → ETD</th><th>%</th></tr></thead>
        <tbody></tbody>
      </table>
    </div>
  </div>

  <div class="panel" id="shipPanel">
    <button class="close" id="closePanel">✕</button>
    <h3 id="pName">Tên tàu</h3>
    <div class="rows">
      <div>Tàu:</div><div id="pShipName">—</div>
      <div>Mã chuyến:</div><div id="pShipKey">—</div>
      <div>Bến (theo vị trí):</div><div id="pBerth">—</div>
      <div>Vị trí (u→px):</div><div id="pSpan">—</div>
      <div>Kích thước (ước tính):</div><div id="pSize">—</div>
      <div>Tiến độ:</div><div id="pProg">—</div>
      <div>ETA → ETD:</div><div id="pEtaEtd">—</div>
    </div>
  </div>

  <div class="panel" id="berthPanel">
    <button class="close" id="closeBerth">✕</button>
    <h3 id="bTitle">Tên bến</h3>
    <div class="rows">
      <div>Mã bến:</div><div id="bNo">—</div>
      <div>Chiều dài (m):</div><div id="bLen">—</div>
      <div>Độ sâu TK (hải đồ):</div><div id="bDepth">—</div>
      <div>Tải trọng (tấn):</div><div id="bPayload">—</div>
      <div>Vị trí (u):</div><div id="bSpan">—</div>
    </div>
  </div>

  <!-- World khớp kích thước ảnh map -->
  <svg id="root" viewBox="0 0 3000 2000" preserveAspectRatio="xMidYMid meet">
    <defs>
      <clipPath id="seaClip" clipPathUnits="userSpaceOnUse">
        <rect id="seaClipRect" x="0" y="0" width="0" height="0"/>
      </clipPath>
    </defs>
    <g id="camera">
      <image id="basemap" href="assets/port-map.svg" x="0" y="0" width="3000" height="2000"></image>
      <g id="layer-berths"></g>
      <g id="layer-ships" style="clip-path:url(#seaClip)"></g>
    </g>
  </svg>
</div>

<script>
/* ================= CONFIG (khớp ảnh) ================= */
const MAP = { W:3000, H:2000 };
const SEA = { x1:80, x2:2920, y:720, height:360 };
const SEA_PAD  = 300;
const PAD_VIS  = 6;
const LANE_GAP_PX = 10;
const BEAM_VISUAL_SCALE = 1.6;
const MIN_SHIP_HEIGHT   = 14;
const SHIP_SPRITES = [
  { src:'assets/cargo-ship-2.png',   w:419, h:94 },
  { src:'assets/tau-tong-hop-1.png', w:419, h:94 }
];

/* ============== CAMERA (pan/zoom) ============== */
const stage=document.getElementById('stage'), svg=document.getElementById('root'), camera=document.getElementById('camera');
let scale=1,tx=0,ty=0; const MIN=0.5,MAX=8;
const apply=()=>camera.setAttribute('transform',`translate(${tx},${ty}) scale(${scale})`);

function fitContain(){const vw=stage.clientWidth,vh=stage.clientHeight;scale=Math.min(vw/MAP.W,vh/MAP.H);tx=(vw-MAP.W*scale)/2;ty=(vh-MAP.H*scale)/2;apply();}
function fitCover(){const vw=stage.clientWidth,vh=stage.clientHeight;scale=Math.max(vw/MAP.W,vh/MAP.H);tx=(vw-MAP.W*scale)/2;ty=(vh-MAP.H*scale)/2;apply();}
function fitHeight(){const vw=stage.clientWidth,vh=stage.clientHeight;scale=vh/MAP.H;tx=(vw-MAP.W*scale)/2;ty=(vh-MAP.H*scale)/2;apply();}

function clientToSvgPoint(x,y){const p=svg.createSVGPoint();p.x=x;p.y=y;return p.matrixTransform(svg.getScreenCTM().inverse());}
function zoomBy(f){
  const r=svg.getBoundingClientRect(),cx=r.width/2,cy=r.height/2;
  const p=clientToSvgPoint(cx,cy);
  const ns=Math.max(MIN,Math.min(MAX,scale*f));
  tx=p.x-(p.x-tx)*(ns/scale); ty=p.y-(p.y-ty)*(ns/scale); scale=ns; apply();
}

let dragging=false,lx=0,ly=0,lockDrag=false,userInteracted=false;
svg.addEventListener('pointerdown',e=>{
  userInteracted=true;
  // không bật drag khi bấm vào tàu hoặc nhãn bến
  lockDrag = !!e.target.closest('.ship, .berth');
  if (lockDrag) return;
  dragging=true; lx=e.clientX; ly=e.clientY; svg.setPointerCapture(e.pointerId);
});
svg.addEventListener('pointerup',()=>{dragging=false;lockDrag=false;});
svg.addEventListener('pointermove',e=>{if(!dragging||lockDrag)return;tx+=e.clientX-lx;ty+=e.clientY-ly;lx=e.clientX;ly=e.clientY;apply();});
svg.addEventListener('wheel',e=>{e.preventDefault();userInteracted=true;zoomBy(e.deltaY>0?0.9:1.1)},{passive:false});

document.getElementById('fit').onclick   = ()=>{userInteracted=false;fitContain();};
document.getElementById('cover').onclick = ()=>{userInteracted=false;fitCover();};
document.getElementById('zoomIn').onclick= ()=>{userInteracted=true; zoomBy(1.15);};
document.getElementById('zoomOut').onclick=()=>{userInteracted=true; zoomBy(0.87);};

function autoFitOnResize(){ if(!userInteracted) fitHeight(); }
new ResizeObserver(autoFitOnResize).observe(stage);
fitHeight();

/* ============== CLIP SEA ============== */
const seaClipRect=document.getElementById('seaClipRect');
function applySeaClip(){
  const left  = SEA.x1 + SEA_PAD;
  const right = SEA.x2 - SEA_PAD;
  seaClipRect.setAttribute('x', left);
  seaClipRect.setAttribute('y', SEA.y - SEA.height);
  seaClipRect.setAttribute('width',  right - left);
  seaClipRect.setAttribute('height', SEA.height);
}
applySeaClip();

function loadData(){
  const raw = localStorage.getItem('portMapData');
  const warn = document.getElementById('warn');
  if (!raw){ warn.style.display='block'; throw new Error('Không có localStorage["portMapData"].'); }
  let obj;
  try { obj = JSON.parse(raw); } catch(e){ warn.textContent='JSON lỗi trong localStorage.'; warn.style.display='block'; throw e; }
  return obj;
}

function normalizeUnits(berths){ return Math.max(...berths.map(b=>+b.PosTo||0)); }
function buildUnitToPx(totalUnits){
  const origin = (SEA.x1 + SEA_PAD);
  const right  = (SEA.x2 - SEA_PAD);
  const usableW = right - origin;
  const pxPerUnit = usableW / totalUnits;
  return {origin, rightBound:right, usableW, pxPerUnit, uToPx:(u)=> origin + u*pxPerUnit};
}
function getShipSpanUAbsolute(ship, totalUnits){
  let u1 = +ship.PosFrom || 0, u2 = +ship.PosTo || 0;
  if (!(u1>0 && u2>0)) {
    const f=+ship.FROM_POS||0, t=+ship.TO_POS||0;
    if (f>0 && t>0){
      let k=1, mx=Math.max(f,t);
      if (mx>totalUnits*8 && mx<totalUnits*200) k=10;
      if (mx>=totalUnits*200) k=100;
      u1=f/k; u2=t/k;
    }
  }
  if (u2<u1) [u1,u2]=[u2,u1];
  u1=Math.max(0,Math.min(u1,totalUnits));
  u2=Math.max(0,Math.min(u2,totalUnits));
  return (u2-u1>1)? {u1,u2}: null;
}
function findBerthForSpan(span, berths){
  let best=null,bestLen=0;
  for (const b of berths){
    const a=+b.PosFrom||0, z=+b.PosTo||0;
    const l=Math.max(0, Math.min(span.u2,z)-Math.max(span.u1,a));
    if (l>bestLen){ bestLen=l; best=b; }
  }
  return best;
}
function intersectSpanWithBerth(span, berth){
  const b1=+berth.PosFrom||0, b2=+berth.PosTo||0;
  const u1=Math.max(span.u1,b1), u2=Math.min(span.u2,b2);
  return (u2-u1>1)? {u1,u2}: null;
}
function progressFromJobs(jobData, shipKey){
  const jobs = (jobData||[]).filter(j=>j.ShipKey===shipKey);
  const total = jobs.reduce((s,j)=>s + (+j.JobCount||0), 0);
  const done  = jobs.reduce((s,j)=> s + ((j.Status==='F'||j.Status==='R')?(+j.JobCount||0):0), 0);
  if (!total) return 0;
  return Math.round(100*done/total);
}
function assignLanes(spansPx, minGapPx=6){
  const lanesEnd = [];
  spansPx.forEach(s=>{
    let lane = 0;
    while (lane < lanesEnd.length && s.x1 <= lanesEnd[lane] + minGapPx) lane++;
    if (lane === lanesEnd.length) lanesEnd.push(s.x2);
    else lanesEnd[lane] = s.x2;
    s.lane = lane;
  });
  return lanesEnd.length;
}

const berthsLayer=document.getElementById('layer-berths');
const shipsLayer=document.getElementById('layer-ships');
function svgEl(tag,attrs={},text){const el=document.createElementNS('http://www.w3.org/2000/svg',tag);for(const k in attrs)el.setAttribute(k,attrs[k]);if(text!=null)el.textContent=text;return el;}

const berthPanel = document.getElementById('berthPanel');
document.getElementById('closeBerth').onclick=()=>berthPanel.style.display='none';
const bTitle  = document.getElementById('bTitle');
const bNo     = document.getElementById('bNo');
const bLen    = document.getElementById('bLen');
const bDepth  = document.getElementById('bDepth');
const bPayload= document.getElementById('bPayload');
const bSpan   = document.getElementById('bSpan');

function drawBerths(berths, uMap){
  berthsLayer.innerHTML='';
  const seaBottomY = SEA.y;

  (berths||[]).forEach(b=>{
    const u1 = +b.PosFrom||0, u2 = +b.PosTo||0;
    if (u2<=u1) return;
    const cx = (uMap.uToPx(u1)+uMap.uToPx(u2))/2;

    const spanPx = Math.max(24, (uMap.uToPx(u2)-uMap.uToPx(u1)));
    const tabW   = Math.max(56, Math.min(180, spanPx*0.45))/2;
    const tabH   = 18;

    const g = svgEl('g',{class:'berth', transform:`translate(${cx},${seaBottomY+2})`, style:'cursor:pointer'});
    berthsLayer.appendChild(g);

    // g.appendChild(svgEl('rect',{x:-tabW/2,y:-tabH+16,width:tabW,height:tabH,rx:6,fill:'#163a6b'}));
    // g.appendChild(svgEl('text',{x:0,y:-4,'font-size':12,'font-weight':700,fill:'#fff','text-anchor':'middle'},
    //   (b.BerthName||b.BerthNo||'Bến')));
  g.appendChild(svgEl('rect',{x:-tabW/2,y:-tabH+16,width:tabW,height:tabH,rx:6,fill:'#163a6b'}));
    g.appendChild(svgEl('text',{x:0,y:12,'font-size':12,'font-weight':700,fill:'#fff','text-anchor':'middle'},
      (b.BerthName||b.BerthNo||'Bến')));

    const hit = svgEl('rect',{x:-tabW/2-12,y:-tabH-12,width:tabW+24,height:tabH+26,fill:'#000','fill-opacity':'0.001'});
    g.appendChild(hit);

    // chặn bubbling để không kích hoạt drag
    g.addEventListener('pointerdown',e=>e.stopPropagation(),{passive:true});
    g.addEventListener('click',()=>{
      bTitle.textContent   = b.BerthName || b.BerthNo || 'Bến';
      bNo.textContent      = b.BerthNo || '—';
      bLen.textContent     = (b.BerthLength!=null? b.BerthLength : (u2-u1)).toString();
      bDepth.textContent   = (b.BerthDepth!=null? b.BerthDepth : '—').toString();
      bPayload.textContent = (b.Payload!=null? b.Payload : '—').toString();
      bSpan.textContent    = `${u1} → ${u2}`;
      berthPanel.style.display='block';
    },{passive:true});
  });
}

function drawShips(ships, berths, uMap, jobData){
  shipsLayer.innerHTML='';
  const seaBottomY = SEA.y;
  const laneMaxH   = Math.max(10, SEA.height - 8);

  const seen = new Set();
  const uniq = ships.filter(s=>{ if(seen.has(s.ShipKey)) return false; seen.add(s.ShipKey); return true; });

  const totalU = uMap.usableW / uMap.pxPerUnit;
  const grouped = new Map();

  uniq.forEach(s=>{
    const spanAbs = getShipSpanUAbsolute(s, totalU);
    if (!spanAbs) return;
    const berthReal = findBerthForSpan(spanAbs, berths);
    if (!berthReal) return;
    const spanInBerth = intersectSpanWithBerth(spanAbs, berthReal);
    if (!spanInBerth) return;

    let x1 = uMap.uToPx(spanInBerth.u1) + PAD_VIS;
    let x2 = uMap.uToPx(spanInBerth.u2) - PAD_VIS;
    if (x2 <= x1) x2 = x1 + 30;

    const arr = grouped.get(berthReal.BerthNo) || [];
    arr.push({ ship:s, berth:berthReal, u:spanInBerth, px:{x1,x2} });
    grouped.set(berthReal.BerthNo, arr);
  });

  for (const [berthNo, items] of grouped.entries()){
    items.sort((a,b)=>a.px.x1 - b.px.x1);
    const spans = items.map(it=>({ x1:it.px.x1, x2:it.px.x2 }));
    const lanesCount = assignLanes(spans, 6);
    const laneHeight = Math.max(MIN_SHIP_HEIGHT, Math.floor((laneMaxH - (lanesCount-1)*LANE_GAP_PX) / lanesCount));

    items.forEach((it, idx)=>{
      const lane = spans[idx].lane;
      const w = Math.max(12, it.px.x2 - it.px.x1);
      const ppm = uMap.pxPerUnit;
      const loaM = w / ppm;
      const estBeamM = (it.ship.BeamM && +it.ship.BeamM>0) ? +it.ship.BeamM : loaM * 0.12;
      let   h = Math.min(laneHeight, Math.max(MIN_SHIP_HEIGHT, estBeamM * ppm * BEAM_VISUAL_SCALE));

      const cx = (it.px.x1 + it.px.x2)/2;
      const baseY = seaBottomY - 1 - lane*(h + LANE_GAP_PX);

      const g = svgEl('g',{class:'ship', transform:`translate(${cx},${baseY})`, 'data-shipkey': it.ship.ShipKey});
      shipsLayer.appendChild(g);

      const spr = Math.random()<0.5?SHIP_SPRITES[0]:SHIP_SPRITES[1];
      g.appendChild(svgEl('image',{ href:spr.src, x:-w/2, y:-h, width:w, height:h, preserveAspectRatio:'xMidYMid meet' }));

      // Progress: mặc định đặt ở bên phải; nếu tràn thì chuyển trái; nếu vẫn không đủ → đưa vào trong thân
      const prog = progressFromJobs(jobData, it.ship.ShipKey);
      const trackW = 10;
      const trackH = Math.max(20, Math.floor(h*0.9));
      const trackY = -h + Math.floor((h - trackH)/2);
      const seaL = SEA.x1 + SEA_PAD, seaR = SEA.x2 - SEA_PAD;
      const TEXT_W_APPROX = 36, GAP_OUTSIDE=6, GAP_TEXT=6;
      const UI_W = trackW + GAP_TEXT + TEXT_W_APPROX;

      let trackX =  w/2 + GAP_OUTSIDE;
      let textX  =  trackX + trackW + GAP_TEXT;
     trackX =  w/2 - (trackW + 40);
          textX  =  trackX + trackW + GAP_TEXT;
      // if (cx + (w/2) + GAP_OUTSIDE + UI_W > seaR) {
      //   trackX = -w/2 - GAP_OUTSIDE - trackW;
      //   textX  =  trackX + trackW + GAP_TEXT;
      //   if (cx + trackX < seaL) { // không đủ hai bên -> đặt trong thân, mép phải
      //     trackX =  w/2 - (trackW + 4);
      //     textX  =  trackX + trackW + GAP_TEXT;
      //   }
      // }

      const fillH=Math.round(trackH*(prog/100)), fillY=trackY+(trackH-fillH);
      g.appendChild(svgEl('rect',{x:trackX,y:trackY,width:trackW,height:trackH,rx:trackW/2,fill:'#e9ecef'}));
      g.appendChild(svgEl('rect',{x:trackX,y:fillY,width:trackW,height:fillH,rx:trackW/2,fill:'#34c759'}));
      g.appendChild(svgEl('text',{x:textX+8,y:trackY/2,'font-size':16,'font-weight':700,fill:'#1d3f77'},`${prog}%`));

      const hit=svgEl('rect',{class:'hit',x:-w/2-12,y:-h-12,width:w+24,height:h+24,fill:'#000','fill-opacity':'0.001'});
      g.appendChild(hit);

      const meta={
        shipName:it.ship.ShipName, shipKey:it.ship.ShipKey,
        berthName:(it.berth.BerthName||it.berth.BerthNo),
        uSpan:`${it.u.u1.toFixed(1)} → ${it.u.u2.toFixed(1)} (pxPerUnit=${uMap.pxPerUnit.toFixed(3)})`,
        size:`~${loaM.toFixed(1)} m × ${(estBeamM).toFixed(1)} m`,
        progress:prog, eta:it.ship.ETA||'—', etd:it.ship.ETD||it.ship.Etd||'—'
      };
      hit.addEventListener('pointerup',e=>{e.stopPropagation();showPanel(meta);},{passive:true});
    });
  }
}

const jobsBody = document.getElementById('jobsBody');
const jobsToggle = document.getElementById('jobsToggle');
jobsToggle.onclick = ()=>{const open = jobsBody.style.display !== 'none'; jobsBody.style.display = open ? 'none' : 'block'; jobsToggle.textContent = open ? 'Hiện ▼' : 'Ẩn ▲';};

function buildJobsTable(ships, berths, jobData){
  const tbody = document.querySelector('#jobsTable tbody');
  tbody.innerHTML='';
  const seen = new Set();
  const rows = ships.filter(s=>{if(seen.has(s.ShipKey)) return false; seen.add(s.ShipKey); return true;})
    .map(s=>{
      const totalU = Math.max(...(berths||[]).map(b=>+b.PosTo||0));
      const span = getShipSpanUAbsolute(s, totalU);
      const berthReal = span ? findBerthForSpan(span, berths||[]) : null;
      const berthName = berthReal ? (berthReal.BerthName || berthReal.BerthNo) : (s.BerthNo || '—');
      const prog = progressFromJobs(jobData, s.ShipKey);
      return { key:s.ShipKey, ship:s.ShipName||'—', berth:berthName, eta:s.ETA||'—', etd:s.ETD||s.Etd||'—', prog };
    })
    .sort((a,b)=> (a.berth||'').localeCompare(b.berth||'') || (b.prog - a.prog));
  rows.forEach(r=>{
    const tr=document.createElement('tr');
    tr.innerHTML=`<td>${r.berth}</td>
      <td class="ship">${r.ship}</td>
      <td class="hide-sm">${r.key}</td>
      <td class="hide-sm">${r.eta} → ${r.etd}</td>
      <td style="min-width:160px"><div class="bar"><i style="width:${r.prog}%"></i></div></td>`;
    tr.addEventListener('click', ()=> focusShipByKey(r.key));
    tbody.appendChild(tr);
  });
}

const panel=document.getElementById('shipPanel');
const el=(id)=>document.getElementById(id);
document.getElementById('closePanel').onclick=()=>panel.style.display='none';
function showPanel(m){
  el('pName').textContent     = m.shipName;
  el('pShipName').textContent = m.shipName;
  el('pShipKey').textContent  = m.shipKey;
  el('pBerth').textContent    = m.berthName;
  el('pSpan').textContent     = m.uSpan;
  el('pSize').textContent     = m.size;
  el('pProg').textContent     = `${m.progress}%`;
  el('pEtaEtd').textContent   = `${m.eta} → ${m.etd}`;
  panel.style.display='block';
}

function focusShipByKey(shipKey){
  const g = shipsLayer.querySelector(`g.ship[data-shipkey="${shipKey}"]`);
  if (!g) return;
  const tr = g.getCTM();
  const worldX = tr.e;
  const vw = stage.clientWidth;
  const targetTx = (vw/2) - worldX*scale;
  const startTx = tx; const dur=250; const t0=performance.now();
  function anim(t){const k=Math.min(1,(t-t0)/dur); tx=startTx+(targetTx-startTx)*k; apply(); if(k<1) requestAnimationFrame(anim);}
  requestAnimationFrame(anim);
}
function boot(){
  const raw = loadData();
  const berths = (raw.BerthData||[]).slice().sort((a,b)=> (+a.PosFrom||0) - (+b.PosFrom||0));
  const ships  = raw.ShipData||[];
  const jobs   = raw.JobData||[];
  const totalUnits = normalizeUnits(berths);
  const uMap = buildUnitToPx(totalUnits);
  drawBerths(berths, uMap);
  drawShips(ships, berths, uMap, jobs);
  buildJobsTable(ships, berths, jobs);
   
}
boot();
 
 
</script>
</body>
</html>
